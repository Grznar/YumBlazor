@page "/"

@using System.Globalization

@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IJSRuntime _JS
@inject NavigationManager _navigationManager
@inject IShoppingCartRepository _shoppingCartRepository
<PageTitle>Home</PageTitle>
@if (IsProcessing)
{
	<div class="position-absolute w-100 vh-100 d-flex	flex-column align-items-center bg-white justify-content-center">
		<img src="/images//loading.gif" alt="loading" />
	</div>
}
else
{
	<div class="container-fluid px-0 m-0 full-width">
		<div class="jumbotron-custom">
			<div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">

				<div class="d-flex align-items-center" style="width: 100%;">
					<input type="text" class="form-control rounded-pill"
					@bind:event="oninput" @bind:get="_searchText" @bind:set="SearchProducts"
					placeholder="Search for Food Items!"
					style="width: 100%; padding: 20px;">
					<span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
				</div>
			</div>
		</div>

		<div class="content px-4 m-2">
			<ul class="nav nav-underline justify-content-center mb-2">
				<li class="nav-item">
					<span class="nav-link @GetActiveTabClass(0)" href="#" style="cursor: pointer" @onclick="()=>FilterProducts(0)">All</span>
				</li>
				@foreach (var category in Categories)
				{
					<li class="nav-item">
						<span class="nav-link @GetActiveTabClass(category.Id)" @onclick="()=>FilterProducts(category.Id)" href="#" style="cursor: pointer">@category.Name</span>
					</li>
				}

			</ul>
			<div class="row mt-4 mx-1">
				@foreach (var obj in FilteredProducts)
				{
					<div class="col-12 col-md-6 col-lg-4 pe-3 mb-5">
						<div class="card">
							<div class="mt-3 mb-2 row">
								@if (!string.IsNullOrEmpty(obj.SpecialTag))
								{
									<div class="col-6 px-3">
										<i class="bi bi-star btn btn-outline-success disabled"> @obj.SpecialTag</i>
									</div>
								}
								<div class="col-6 text-end px-3 text-danger h3">
									@obj.Price.ToString("C", CultureInfo.GetCultureInfo("cs-CZ"))
								</div>
							</div>
							@if (!string.IsNullOrEmpty(obj.ImageUrl))
							{
								<div class="text-center">
									<img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="@obj.ImageUrl" style="">
								</div>
							}
							else
							{
								<div class="text-center">
									<img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="/images/default.png" style="">
								</div>
							}

							<div class="card-body">
								<h5 class="card-title text-center lead text-success">@obj.Name</h5>
								<p class="card-text mt-2">@((MarkupString)@obj.Description)</p>
								<h4 class="text-center">
									<div class="m-lg-auto p-2"@onclick="()=>AddOrderItem(obj)">
									<i class="bi bi-cart3 btn btn-success text-right  px-5 form-control" style="width:300px"> Add to cart</i>
									</div>
								</h4>


							</div>
						</div>
					</div>
				}
			</div>
		</div>
	</div>
}
@code
{
	private IEnumerable<Product> Products { get; set; } = new List<Product>();
	private IEnumerable<Product> FilteredProducts { get; set; } = new List<Product>();
	private IEnumerable<Category> Categories { get; set; } = new List<Category>();
	private bool IsProcessing { get; set; } = true;
	private int _categoryId { get; set; } = 0;
	private string _searchText { get; set; } = string.Empty;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadProducts();
			IsProcessing = false;
			StateHasChanged();
		}

	}
	private async  Task LoadProducts()
	{
		Products = await _productRepository.GetAllAsync();
		Categories = await _categoryRepository.GetAllAsync();
		FilterProducts(0);

	}
	private void FilterProducts(int categoryId)
	{
		if (categoryId == 0)
		{
			FilteredProducts = Products;
			_categoryId = categoryId;
			return;
		}
		else
		{
			FilteredProducts = Products.Where(x => x.CategoryId == categoryId);
			_categoryId = categoryId;
			_searchText = string.Empty;
		}

	}
	private void SearchProducts(string searchText)
	{
		if (string.IsNullOrEmpty(searchText))
		{
			FilteredProducts = Products;
			
		}
		else
		{
			FilteredProducts = Products.Where(x => x.Name.ToLower().Contains(searchText.ToLower()));
	
		}
		_searchText = searchText;
	}
	private string GetActiveTabClass(int categoryId)
	{
		return categoryId == _categoryId ? "active" : string.Empty;
	}
	private async Task AddOrderItem(Product product)
	{
		var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();

		var user = authState.User;

		var authenticated = user.Identity is not null && user.Identity.IsAuthenticated;
		if (!authenticated)
		{
			_navigationManager.NavigateTo("/Account/Login",true);
		}
		else
		{
			var result = await _shoppingCartRepository.UpdateCartAsync(user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value, product.Id, 1);

			if (result)
			{
				await _JS.ToastrSuccess("Item added to cart");
			}
			else
			{
				await _JS.ToastrError("Error");
			}
		}
	}
}