@page "/product/create"
@page "/product/update/{Id:int}"
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _JS
@inject IWebHostEnvironment _webHostEnvironment

@if (IsProcessing)
{
	<div class="position-absolute w-75 h-75 d-flex	flex-column align-items-center bg-white justify-content-center">
		<img src="/images//loading.gif" alt="loading" />
	</div>
}
else
{
	<div class="card shadow border-0 m-4">
		<div class="card-header bg-black bg-gradient ml-0 py-3">
			<div class="row">
				<div class="col-12 text-center">
					<h2 class="text-white py-2">@(Id > 0 ? "Update" : "Create") Product</h2>
				</div>
			</div>
		</div>
		<div class="card-body pt-4">
			<EditForm Model="Product" FormName="ProductUpsert" OnValidSubmit="UpsertProduct">
				<DataAnnotationsValidator/>


				<div class="border pt-3 mt-4 p-4">
					<div class="form-floating py-3 col-12">
						<InputText @bind-Value="Product.Name" class="form-control" id="Name" />
						<label for="Name">Name</label>
						<ValidationMessage For="@(() => Product.Name)"/>

					</div>
					<div class="form-floating py-3 col-12">
						<InputText @bind-Value="Product.Description" class="form-control" id="Description" />
						<label for="Description">Description</label>
						<ValidationMessage For="@(() => Product.Description)" />

					</div>
					<div class="form-floating py-3 col-12">
						<InputText @bind-Value="Product.SpecialTag" class="form-control" id="SpecialTag" />
						<label for="SpecialTag">SpecialTag</label>
						<ValidationMessage For="@(() => Product.SpecialTag)" />

					</div>
					<div class="form-floating py-3 col-12">
						<InputNumber @bind-Value="Product.Price" class="form-control" id="Price" />
						<label for="Price">Price</label>
						<ValidationMessage For="@(() => Product.Price)" />

					</div>
					<div class="form-floating py-3 col-12">
						<InputSelect @bind-Value="Product.CategoryId" class="form-select" id="category">
							<option value="0" disabled selected>Select Category</option>
							@foreach (var category in _categories)
							{
								<option value="@category.Id">@category.Name</option>
							}
						</InputSelect>

						<label for="Category">Category
						</label>
						<ValidationMessage For="@(() => Product.CategoryId)" />

					</div>
					<div class="form-floating py-3 col-12">
						@if (Product.ImageUrl is null)
						{
							<InputFile OnChange="LoadFiles"@bind-Value="Product.ImageUrl" class="form-control" id="customFile" accept="image/x-png,image/jpg"></InputFile>
							<label for="customFile">Upload Image</label>
						}
						@if (Product.ImageUrl is not null)
							{
								<div class="row pt-3">
									<div class="col-3">
										<img src="@Product.ImageUrl" class="img-thumbnail"/>
									</div>
									<div class="col-md-9"><i class="bi bi-trash3-fill btn btn-outline-danger" @onclick="DeleteImg">Remove</i></div>
								</div>
							}
						
					</div>
					<div class="row mt-3">
						<div class="col-6 col-md-3">
							<button type="submit" class="btn btn-secondary form-control" disabled="@IsProcessing">
								<i class="bi bi-save">@(Id > 0 ? "Update" : "Create")</i>
							</button>
						</div>
						<div class="col-6 ">
							<button href="product" class="btn btn-primary form-control" disabled="@IsProcessing">
								<i class="bi bi-arrow-return-left">Back to List</i>
							</button>
						</div>
					</div>
				</div>

			</EditForm>
		</div>
	</div>
}

@code {
	[Parameter]
	public int Id { get; set; }

	public bool IsProcessing { get; set; } = true;

	private string _imagePath { get; set; }
	[SupplyParameterFromForm]
	private Product Product { get; set; } = new Product();

	private IEnumerable<Category>? _categories { get; set; }

	protected override Task OnInitializedAsync()
	{
		_imagePath = Path.Combine(_webHostEnvironment.WebRootPath,"images","product");
		return base.OnInitializedAsync();
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{

			await LoadProductAndCategoryList();
			IsProcessing = false;
			StateHasChanged();

		}

	}
	private async Task LoadProductAndCategoryList()
	{
		if(Id>0)
		{
			Product = await _productRepository.GetAsync(Id);
		}
		_categories = await _categoryRepository.GetAllAsync();
	}
	private async Task UpsertProduct()
	{
		IsProcessing = true;
		if(Product.Id==0)
		{
			await _productRepository.CreateAsync(Product);
			await _JS.ToastrSuccess("Product Created Successfully");
		}
		else
		{
			await _productRepository.UpdateAsync(Product);
			await _JS.ToastrSuccess("Product Updated Successfully");
		}
		IsProcessing = false;
		_navigationManager.NavigateTo("/product");

	}
	private async Task LoadFiles(InputFileChangeEventArgs e)
	{
		IsProcessing = true;

		var file = e.File;
		FileInfo fileInfo = new(file.Name);
		var fileName = $"{Guid.NewGuid()}{fileInfo.Extension}";
		if (!Directory.Exists(_imagePath))
		{
			Directory.CreateDirectory(_imagePath);
		}
		var path = Path.Combine(_imagePath, fileName);

		await using FileStream fileStream = new(path, FileMode.Create);
		await file.OpenReadStream(file.Size).CopyToAsync(fileStream);

		Product.ImageUrl = "/images/product/" + fileName;

		IsProcessing = false;
	}
	void DeleteImg ()
	{
		if (Product.ImageUrl == null) return;
		var fileToDelete = Product.ImageUrl.Split('/').Reverse().First();
		var filePathToDelete = Path.Combine(_imagePath, fileToDelete);
		
		if (!File.Exists(filePathToDelete))
		{
			Product.ImageUrl = null;
			return;
		}
		File.Delete(filePathToDelete);
		Product.ImageUrl = null;
	}
	}