@page "/order/list"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Radzen
@inject IOrderRepository _orderRepository
@inject NavigationManager _navigat
@inject IJSRuntime _JS
@attribute [Authorize]
@if (IsProcessing)
{
	<div class="position-absolute w-100 vh-100 d-flex	flex-column align-items-center bg-white justify-content-center">
		<img src="/images//loading.gif" alt="loading" />
	</div>
}
else
{
	<_BSModal  ButtonBoostrapStyle="btn-danger" ButtonText="Delete" Title="Delete">

	</_BSModal>
	<div class="card shadow border-0 m-4">
		<div class="card-header bg-black bg-gradient ml-0 py-3">
			<div class="row">
				<div class="col-12 text-center">
					<h2 class="text-white py-2">OrderList List</h2>
				</div>
			</div>
		</div>
		<div class="card-body pt-4">

			@if (OrderHeaders.Any())
			{
				<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
								Data="@OrderHeaders" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" >
					<Columns>
						<RadzenDataGridColumn Property="Id" Filterable="true" Title="ID" Frozen="true" Width="80px"/>
						
						<RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" Width="160px" />
						<RadzenDataGridColumn Property="Email" Title="Email" Width="160px" />
						<RadzenDataGridColumn Property="PhoneNumber" Title="Phone Number" Width="200px" />
						<RadzenDataGridColumn Property="OrderTotal" Title="Order Total" FormatString="{0:C}" Width=" 120px" />
						<RadzenDataGridColumn Property="OrderDate" Title="Order Date" FormatString="{0:d}" Width="160px" />
						<RadzenDataGridColumn Property="OrderStatus" Title="Order Status" FormatString="{0:d}" Width="160px" />
						<RadzenDataGridColumn Title="Actions" Frozen="false" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center" >
							<Template Context="orderHeader">
								<RadzenButton Shade="Shade.Lighter" Text="Details" ButtonStyle="ButtonStyle.Primary" Click="@(()=>_navigat.NavigateTo($"/order/details/{orderHeader.Id}"))"></RadzenButton>
							</Template>
						</RadzenDataGridColumn>
					</Columns>
				</RadzenDataGrid>
				
			}
		</div>
	</div>
}
@code {
	public bool IsProcessing { get; set; } = true;
	private IEnumerable<OrderHeader> OrderHeaders { get; set; } = new List<OrderHeader>();
	[CascadingParameter]
	public Task<AuthenticationState> authenticationStateTask { get; set; }

	private bool? isAdmin { get; set; } = null;
	private string? UserId { get; set; } = null;
	// protected override async Task OnInitializedAsync()
	// {
	// 	// IsProcessing=true;
	// 	// await LoadCategories();
	// 	// Thread.Sleep(5000);
	// 	// IsProcessing = false;
	// }
	private async Task LoadOrderHeader()
	{
		IsProcessing = true;
		StateHasChanged();
		await CheckAuth();
		if (isAdmin == true)
		{
			OrderHeaders = await _orderRepository.GetAllAsync();
		}
		else
		{
			OrderHeaders = await _orderRepository.GetAllAsync(UserId);
		}
		
		IsProcessing = false;
	}
	protected override async Task OnInitializedAsync()
	{
		await LoadOrderHeader();
		IsProcessing = false;
		StateHasChanged();
	}

	private async Task CheckAuth()
	{
		if (authenticationStateTask is not null)
		{
			
			
				var authState = await authenticationStateTask;
			var user = authState.User;
			isAdmin = user?.IsInRole(SD.Role_Admin);
			UserId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
			
		}
	}


}
