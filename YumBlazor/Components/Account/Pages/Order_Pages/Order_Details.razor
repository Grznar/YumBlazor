@page "/order/details/{Id:int}"
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using YumBlazor.Utility
@inject IOrderRepository _orderRepository
@inject IJSRuntime _jsRuntime
@rendermode InteractiveServer
@inject AuthenticationStateProvider _authenticationState
@attribute [Authorize]
@if (isProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex	flex-column align-items-center bg-white justify-content-center">
        <img src="/images//loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="container my-5 mx-auto p-5 w-100" style="max-width: 950px;">
        <div class="card" style="max-width: 750px;">
            <div class="pt-3 text-success text-center">
                <span class="h4"> ORDER DETAILS</span>
            </div>

            <hr />
            <div class="px-3">
                <p>Order Id: @orderHeader.Id</p>
                <p>Name: @orderHeader.Name</p>
                <p>Email: @orderHeader.Email</p>
                <p>Phone: @orderHeader.PhoneNumber</p>
                <p>Order Status:  @orderHeader.OrderStatus</p>
            </div>
            <hr />
            <div class="card-body">
                <h4 class="text-success">Menu Items</h4>

                @foreach (var item in orderHeader.OrderDetails)
                {
                    <div class="d-flex">
                        <div class="d-flex w-100 justify-content-between">
                            <p>
                                &nbsp; -- @item.ProductName
                            </p>
                            <p>
                                @item.Price.ToString("c", CultureInfo.GetCultureInfo("cs-CZ")) x @item.Count=
                            </p>
                        </div>
                        <div class="ps-4">
                            @((item.Price * item.Count).ToString("c", CultureInfo.GetCultureInfo("cs-CZ")))
                        </div>

                    </div>
                }

                <hr />
                <h4 class="text-success text-end">
                    @orderHeader.OrderTotal.ToString("c", CultureInfo.GetCultureInfo("cs-CZ"))
                </h4>
                <hr />

                <div class="row">
                    <div class="col-5">
                        <a href="/order/list" class="btn btn-secondary  m-2 p-2" style="width:150px;">Back to Orders</a>
                    </div>
                    <div class="col-7 text-end">
                        @if (orderHeader.OrderStatus != SD.StatusCancelled
                        && orderHeader.OrderStatus != SD.StatusCompleted
                        && _authenticationState.GetAuthenticationStateAsync()
                        .GetAwaiter()
                        .GetResult().User?
                        .IsInRole(SD.Role_Admin)==true)
                        {
                            <button class="btn btn-danger m-2 p-2" @onclick="()=>UpdateStatus(SD.StatusCancelled)"style="width:150px;" >Cancelled</button>
                            @if(orderHeader.OrderStatus==SD.StatusPending)
                            {
                                <button type ="button" class="btn btn-primary m-2 p-2" style="width:150px;" @onclick ="()=>UpdateStatus(SD.StatusReadyForPickUp)">Ready for Pickup</button>
                            }
                            @if (orderHeader.OrderStatus == SD.StatusReadyForPickUp)
                            {
                                <button type="button"@onclick="()=>UpdateStatus(SD.StatusCompleted)" class="btn btn-success m-2 p-2" style="width:150px;">Completed</button>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private bool isProcessing { get; set; } = true;
    private OrderHeader orderHeader { get; set; } = null;
    [Parameter]
    public int Id { get; set; }

    private async Task LoadOrder()
    {
        orderHeader = await _orderRepository.GetAsync(Id);
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadOrder();
        isProcessing = false;
        StateHasChanged();
    }
	private async Task UpdateStatus(string status)
	{
		isProcessing = true;
        StateHasChanged();
		await _orderRepository.UpdateStatusAsync(Id, status);
		_jsRuntime.ToastrSuccess("Order Status Updated Successfully to "+status);
        await LoadOrder();
        isProcessing = false;
        StateHasChanged();
	}
}
